<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>FPL Slot Machine 🎰 — Pro (Random)</title>
<style>
  :root{
    --bg1:#123524;--bg2:#0a7e6e;--accent:#00ff88;--danger:#ff4444;--panel:#0b1f1a;
  }
  *{box-sizing:border-box}
  html,body{height:100%}
  body {
    font-family: system-ui, -apple-system, Segoe UI, Roboto, 'Trebuchet MS', sans-serif;
    background: linear-gradient(135deg, var(--bg1), var(--bg2));
    color: #fff; margin:0; display:flex; flex-direction:column; align-items:center;
  }
  h1 { margin: 18px 12px 4px; font-size: clamp(1.6rem, 3.5vw, 2.6rem); text-shadow: 2px 2px #000; }
  .sub{opacity:.85;margin-bottom:8px;font-size:.95rem}
  .wrap{width:min(960px,100%); padding:0 12px 16px}
  .controls{display:grid; grid-template-columns: 1fr 1fr; gap:10px; margin-top:10px}
  .control-card{
    background: rgba(0,0,0,.25); border:1px solid rgba(255,255,255,.12);
    border-radius:14px; padding:10px;
  }
  .control-card h3{margin:0 0 8px; font-size:1rem; opacity:.9}
  .input-container {
    display: grid; grid-template-columns: repeat(3, minmax(120px,1fr)); gap: 8px;
  }
  .input-container input {
    padding: 10px; font-size: 16px; border-radius: 10px; border: none; text-align: center; outline: none;
  }
  .row{display:flex; gap:8px; flex-wrap:wrap; align-items:center}
  select, .stat {
    padding:10px; border-radius:10px; border:none; font-size:15px;
    background:#ffffff; color:#111; font-weight:600; min-width:160px;
  }
  .stat{background:#0d2e25; color:#eafcf3; border:1px solid rgba(255,255,255,.12)}
  .reels { display:flex; justify-content:center; margin: 22px 0 10px; gap: 16px; width: 100%; }
  .reel {
    width: clamp(96px, 18vw, 140px); height: clamp(96px, 18vw, 140px);
    background: #fff; color: #000; border-radius: 14px;
    display:flex; align-items:center; justify-content:center;
    font-size: clamp(18px, 3.2vw, 26px); font-weight: 800; box-shadow: 0 6px 14px rgba(0,0,0,0.45); padding:8px;
  }
  .btns{display:flex;gap:10px;flex-wrap:wrap;justify-content:center;margin:8px 0 0}
  button { padding: 12px 18px; font-size: 17px; border: none; border-radius: 10px; cursor: pointer; font-weight: 800; }
  #spinBtn { background: var(--accent); color: #000; }
  #resetBtn { background: var(--danger); color: #fff; display:none;}
  #muteBtn { background:#222; color:#fff; }
  #saveBtn { background:#0b0b0b; color:#fff; border:1px solid rgba(255,255,255,.18) }
  #result { margin: 10px 12px 8px; font-size: clamp(20px, 3.6vw, 30px); font-weight: 900; min-height: 40px; text-shadow: 2px 2px #000; word-break:break-word; text-align:center }
  #history{font-size:.95rem; opacity:.95; display:flex; flex-wrap:wrap; gap:8px; justify-content:center}
  .chip{background:#083228; padding:6px 10px; border-radius:999px; border:1px solid rgba(255,255,255,.12)}
  canvas { position: fixed; inset: 0; pointer-events: none; z-index: 9999; }
  footer{margin-top:auto;opacity:.75;padding:8px 0 14px;font-size:.85rem}
  .note{opacity:.7; font-size:.9rem}
</style>
</head>
<body>
  <h1>🎰 FPL Slot Machine — Pro (Random)</h1>
  <div class="sub">Weighted jackpot: starts <b>20%</b>, +<b>10%</b> each miss, resets to 20% on hit.</div>

  <div class="wrap">
    <div class="controls">
      <div class="control-card">
        <h3>Players</h3>
        <div class="input-container" id="inputs">
          <input id="side1" value="Salah">
          <input id="side2" value="Haaland">
          <input id="side3" value="Son">
          <input id="side4" value="Saka">
          <input id="side5" value="Bruno">
          <input id="side6" value="KDB">
        </div>
        <div class="note" style="margin-top:6px">Tip: press Enter to save names. Your setup persists automatically.</div>
      </div>

      <div class="control-card">
        <h3>Theme & Stats</h3>
        <div class="row">
          <select id="themeSelect" title="Theme">
            <option value="Default">Default (Green)</option>
            <option value="Arsenal">Arsenal</option>
            <option value="Liverpool">Liverpool</option>
            <option value="ManCity">Man City</option>
            <option value="Spurs">Spurs</option>
            <option value="Chelsea">Chelsea</option>
            <option value="ManUnited">Man United</option>
          </select>
          <div class="stat" id="statSpins">Spins: 0</div>
          <div class="stat" id="statJackpots">Jackpots: 0</div>
          <div class="stat" id="statRate">Rate: 0%</div>
          <div class="stat" id="statChance">Chance: 20%</div>
        </div>
      </div>
    </div>

    <div class="reels">
      <div class="reel" id="reel1">?</div>
      <div class="reel" id="reel2">?</div>
      <div class="reel" id="reel3">?</div>
    </div>

    <div class="btns">
      <button id="spinBtn">SPIN!</button>
      <button id="resetBtn">Play Again</button>
      <button id="muteBtn" aria-pressed="false">🔊 Sound On</button>
      <button id="saveBtn" title="Save current result as an image">💾 Save Result</button>
    </div>

    <div id="result" role="status" aria-live="polite"></div>
    <div id="history"></div>
  </div>

  <!-- Audios -->
  <audio id="tickSound" preload="auto" crossorigin="anonymous">
    <source src="https://www.soundjay.com/button/sounds/button-16.mp3" type="audio/mpeg">
  </audio>
  <audio id="spinMusic" preload="auto" crossorigin="anonymous">
    <source src="https://www.soundjay.com/button/sounds/button-09.mp3" type="audio/mpeg">
  </audio>
  <audio id="jackpotSound" preload="auto" crossorigin="anonymous">
    <source src="https://www.myinstants.com/media/sounds/goal-india.mp3" type="audio/mpeg">
  </audio>

  <canvas id="confetti"></canvas>

<script>
(() => {
  const LS_KEY = "fplslot_pro_random_v1";
  const themes = {
    Default:{bg1:"#123524", bg2:"#0a7e6e", accent:"#00ff88"},
    Arsenal:{bg1:"#8a0303", bg2:"#ff4d4d", accent:"#ffd700"},
    Liverpool:{bg1:"#006341", bg2:"#d00027", accent:"#ffd700"},
    ManCity:{bg1:"#6ca6d9", bg2:"#1b4f72", accent:"#f5f5f5"},
    Spurs:{bg1:"#0c2340", bg2:"#1f4b99", accent:"#f0eaea"},
    Chelsea:{bg1:"#001489", bg2:"#0d3685", accent:"#ffd700"},
    ManUnited:{bg1:"#da291c", bg2:"#111111", accent:"#ffd100"},
  };

  let state = {
    spinCount: 0,
    jackpots: 0,
    names: ["Salah","Haaland","Ekitike","Saka","Bruno","cucurella"],
    theme: "Default",
    history: [], // last 24
    jackpotChance: 0.2 // ➜ start at 20%
  };

  function loadState(){
    try {
      const raw = localStorage.getItem(LS_KEY);
      if (raw) {
        const s = JSON.parse(raw);
        state = Object.assign(state, s);
      }
    } catch(e){}
  }
  function saveState(){
    try { localStorage.setItem(LS_KEY, JSON.stringify(state)); } catch(e){}
  }

  // Elements
  const reels = [document.getElementById("reel1"), document.getElementById("reel2"), document.getElementById("reel3")];
  const inputs = [...document.querySelectorAll("#inputs input")];
  const themeSelect = document.getElementById("themeSelect");
  const statSpins = document.getElementById("statSpins");
  const statJackpots = document.getElementById("statJackpots");
  const statRate = document.getElementById("statRate");
  const statChance = document.getElementById("statChance");
  const resultDiv = document.getElementById("result");
  const historyDiv = document.getElementById("history");
  const spinBtn = document.getElementById("spinBtn");
  const resetBtn = document.getElementById("resetBtn");
  const muteBtn = document.getElementById("muteBtn");
  const saveBtn = document.getElementById("saveBtn");

  // Audio
  const spinMusic = document.getElementById("spinMusic");
  const tickSound = document.getElementById("tickSound");
  const jackpotSound = document.getElementById("jackpotSound");
  [spinMusic, tickSound, jackpotSound].forEach(a => { a.volume = 0.6; a.playsInline = true; });

  // Mobile audio unlock
  function unlockAudio() {
    [spinMusic, tickSound, jackpotSound].forEach(a => {
      const p = a.play(); if (p && p.then) p.then(()=>a.pause()).catch(()=>{});
    });
    document.removeEventListener("pointerdown", unlockAudio);
  }
  document.addEventListener("pointerdown", unlockAudio, { once:true });

  let spinning = false, muted = false;

  function setMuted(on){
    muted = on;
    [spinMusic, jackpotSound].forEach(a => a.muted = muted);
    muteBtn.textContent = muted ? "🔇 Sound Off" : "🔊 Sound On";
    muteBtn.setAttribute("aria-pressed", String(!muted));
  }
  muteBtn.addEventListener("click", () => setMuted(!muted));

  // Apply theme
  function applyTheme(name){
    const th = themes[name] || themes.Default;
    document.documentElement.style.setProperty("--bg1", th.bg1);
    document.documentElement.style.setProperty("--bg2", th.bg2);
    document.documentElement.style.setProperty("--accent", th.accent);
    state.theme = name; saveState();
  }
  themeSelect.addEventListener("change", e => applyTheme(e.target.value));

  // Init inputs
  function populateInputs(){
    inputs.forEach((el, i) => { el.value = state.names[i] || ""; });
  }
  function getFaces() {
    const arr = inputs.map(i => (i.value||"").trim()).filter(Boolean);
    return arr.length ? arr : ["?", "?", "?", "?", "?", "?"];
  }
  function saveNames(){
    state.names = inputs.map(i => (i.value||"").trim());
    saveState();
  }
  inputs.forEach(i => {
    i.addEventListener("change", saveNames);
    i.addEventListener("keydown", e => { if (e.key === "Enter") { e.preventDefault(); saveNames(); i.blur(); }});
  });

  // Stats & history
  function refreshStats(){
    statSpins.textContent = "Spins: " + state.spinCount;
    statJackpots.textContent = "Jackpots: " + state.jackpots;
    const rate = state.spinCount ? ((state.jackpots/state.spinCount)*100).toFixed(1) : "0.0";
    statRate.textContent = "Rate: " + rate + "%";
    statChance.textContent = "Chance: " + Math.round((state.jackpotChance||0.2)*100) + "%";
    // history chips
    historyDiv.innerHTML = "";
    state.history.slice(-8).reverse().forEach(h => {
      const chip = document.createElement("div");
      chip.className = "chip";
      chip.textContent = h.text;
      historyDiv.appendChild(chip);
    });
  }

  // Tick sound clone
  function playTick(){
    if (muted) return;
    const clone = tickSound.cloneNode(true);
    clone.volume = tickSound.volume;
    clone.muted = false;
    clone.play().catch(()=>{});
    clone.addEventListener("ended", () => clone.remove());
  }

  // Canvas utilities
  const canvas = document.getElementById("confetti");
  const ctx = canvas.getContext("2d");
  function resizeCanvas(){
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  }
  resizeCanvas(); window.addEventListener("resize", resizeCanvas);

  // Confetti & Firework
  function makeConfetti() {
    resizeCanvas();
    const particles = [];
    for (let i=0; i<200; i++) {
      particles.push({
        x: Math.random()*canvas.width, y: -20 - Math.random()*canvas.height,
        r: Math.random()*4+2, color:`hsl(${Math.random()*360},100%,50%)`,
        vy: 2 + Math.random()*2, vx: -1 + Math.random()*2
      });
    }
    const start = performance.now();
    function draw(now) {
      const elapsed = now - start;
      ctx.clearRect(0,0,canvas.width,canvas.height);
      particles.forEach(p=>{
        p.x += p.vx; p.y += p.vy;
        ctx.beginPath(); ctx.fillStyle=p.color;
        ctx.arc(p.x,p.y,p.r,0,Math.PI*2); ctx.fill();
      });
      if (elapsed < 4000) requestAnimationFrame(draw);
    }
    requestAnimationFrame(draw);
  }
  function makeFirework() {
    resizeCanvas();
    const x = Math.random()*canvas.width;
    const y = Math.random()*canvas.height/2;
    const particles = [];
    for(let i=0;i<60;i++){
      const angle = (i/60)*Math.PI*2;
      const speed = 1 + Math.random()*5.5;
      particles.push({ x, y, r: 2, dx: Math.cos(angle)*speed, dy: Math.sin(angle)*speed, color:`hsl(${Math.random()*360},100%,50%)` });
    }
    const start = performance.now();
    function animate(now){
      const t = now - start;
      ctx.clearRect(0,0,canvas.width,canvas.height);
      particles.forEach(p=>{
        p.x += p.dx; p.y += p.dy; p.r *= 0.97;
        ctx.beginPath(); ctx.arc(p.x,p.y,Math.max(0.2,p.r),0,Math.PI*2);
        ctx.fillStyle=p.color; ctx.fill();
      });
      if (t < 900) requestAnimationFrame(animate);
    }
    requestAnimationFrame(animate);
  }

  // Spin logic with weighted random jackpot
  function spin() {
    if (spinning) return;
    spinning = true;
    state.spinCount++;
    saveState();
    refreshStats();

    const faces = getFaces();

    // ✅ Weighted random jackpot: roll vs current chance
    const roll = Math.random();
    const isJackpot = roll < (state.jackpotChance ?? 0.2);
    if (isJackpot) {
      state.jackpotChance = 0.2; // reset on hit
    } else {
      state.jackpotChance = Math.min((state.jackpotChance ?? 0.2) + 0.1, 1.0); // +10% per miss
    }
    saveState();
    refreshStats();

    const jackpotSymbol = faces[Math.floor(Math.random() * faces.length)];
    const durations = [1700, 2500, 3300];

    try { spinMusic.currentTime = 0; spinMusic.play().catch(()=>{}); } catch(e){}

    const start = performance.now();
    const starts = [start, start, start];
    const done = [false,false,false];

    function updateReel(i, now){
      const elapsed = now - starts[i];
      if (elapsed < durations[i]) {
        const rand = Math.floor(Math.random() * faces.length);
        reels[i].textContent = faces[rand];
        if (elapsed - (reels[i]._lastTick || 0) > 110) {
          reels[i]._lastTick = elapsed; playTick();
        }
      } else if (!done[i]) {
        reels[i].textContent = isJackpot ? jackpotSymbol : faces[Math.floor(Math.random() * faces.length)];
        done[i] = true;
      }
    }

    function loop(now){
      updateReel(0, now); updateReel(1, now); updateReel(2, now);
      if (done[0] && done[1] && done[2]) { endSpin(isJackpot, jackpotSymbol); }
      else { requestAnimationFrame(loop); }
    }
    requestAnimationFrame(loop);

    spinBtn.disabled = true;
    resetBtn.style.display = "none";
  }

  function endSpin(isJackpot, symbol){
    try { spinMusic.pause(); } catch(e){}
    let text;
    if (isJackpot) {
      state.jackpots++; saveState(); refreshStats();
      text = "🎉 คุณควรจะกัปตัน... " + symbol + " 🎉";
      try { jackpotSound.currentTime = 0; if(!muted) jackpotSound.play().catch(()=>{});} catch(e){}
      makeConfetti();
      for(let i=0;i<4;i++) setTimeout(makeFirework, i*600);
    } else {
      const vals = reels.map(r => r.textContent);
      text = vals.join(" | ");
    }
    resultDiv.textContent = text;
    // push history
    state.history.push({ ts: Date.now(), text }); if (state.history.length>24) state.history.shift();
    saveState(); refreshStats();

    spinBtn.disabled = false;
    resetBtn.style.display = "inline-block";
    spinning = false;
  }

  function resetGame() {
    resultDiv.textContent = "";
    reels.forEach(r => r.textContent = "?");
    resetBtn.style.display = "none";
  }

  // Save image of current result
  function saveImage(){
    const faces = reels.map(r => r.textContent);
    const th = themes[state.theme] || themes.Default;

    const w = 1200, h = 630; // social-friendly
    const c = document.createElement("canvas");
    c.width = w; c.height = h;
    const g = c.getContext("2d");

    // background gradient
    const grad = g.createLinearGradient(0,0,w,h);
    grad.addColorStop(0, th.bg1); grad.addColorStop(1, th.bg2);
    g.fillStyle = grad; g.fillRect(0,0,w,h);

    // title
    g.fillStyle = "#ffffff";
    g.font = "bold 44px system-ui,Segoe UI,Roboto";
    g.shadowColor = "rgba(0,0,0,.4)"; g.shadowBlur = 12;
    g.fillText("FPL Slot Machine — Result", 44, 80);

    // reels
    const boxW = 280, boxH = 280, gap = 30;
    const startX = (w - (boxW*3 + gap*2))/2;
    const y = 150;
    g.shadowBlur = 18;
    for(let i=0;i<3;i++){
      const x = startX + i*(boxW+gap);
      g.fillStyle = "#ffffff"; g.fillRect(x, y, boxW, boxH);
      g.strokeStyle = "rgba(0,0,0,.25)"; g.lineWidth = 6; g.strokeRect(x, y, boxW, boxH);
      // text inside
      g.fillStyle = "#111"; g.font = "900 40px system-ui,Segoe UI,Roboto";
      const name = faces[i] || "?";
      drawCenteredText(g, name, x+boxW/2, y+boxH/2, boxW-24);
    }

    // result string
    g.shadowBlur = 10;
    g.fillStyle = th.accent;
    g.font = "900 54px system-ui,Segoe UI,Roboto";
    const res = resultDiv.textContent || faces.join(" | ");
    drawCenteredText(g, res, w/2, y+boxH+80, w-80);

    // footer
    g.shadowBlur = 0;
    g.fillStyle = "rgba(255,255,255,.9)";
    g.font = "600 24px system-ui,Segoe UI,Roboto";
    const dt = new Date().toLocaleString();
    g.fillText("Saved at " + dt, 44, h-40);

    const url = c.toDataURL("image/png");
    const a = document.createElement("a");
    a.href = url;
    a.download = "fpl-slot-result.png";
    a.click();
  }

  function drawCenteredText(ctx, text, cx, cy, maxWidth){
    const words = String(text).split(" ");
    let lines = []; let line = "";
    ctx.textAlign = "center"; ctx.textBaseline = "middle";
    for(const w of words){
      const test = line ? (line + " " + w) : w;
      if (ctx.measureText(test).width <= maxWidth){
        line = test;
      } else {
        lines.push(line); line = w;
      }
    }
    if (line) lines.push(line);
    const lineHeight = 46;
    const offsetY = cy - ((lines.length-1)*lineHeight)/2;
    lines.forEach((ln,i)=> ctx.fillText(ln, cx, offsetY + i*lineHeight));
  }

  // Bindings
  spinBtn.addEventListener("click", spin);
  resetBtn.addEventListener("click", resetGame);
  saveBtn.addEventListener("click", saveImage);

  // Init
  loadState();
  // Backward compat: ensure jackpotChance exists
  if (typeof state.jackpotChance !== "number" || isNaN(state.jackpotChance)) state.jackpotChance = 0.2;
  populateInputs();
  themeSelect.value = state.theme || "Default";
  applyTheme(themeSelect.value);
  refreshStats();

  // Expose for console
  window._fplslot = { state };
})();</script>
<footer>Made with 💚 for FPL spins — vPro Random</footer>
</body>
</html>
